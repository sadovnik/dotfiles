set nocompatible
call plug#begin('~/.vim/plugged')

" Text manipulation
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-endwise' " Helps to end some code structures automatically after opening
" Plug 'tpope/vim-projectionist'
" Plug 'tpope/vim-dispatch'

" Appearance
Plug 'nanotech/jellybeans.vim' " Current theme
Plug 'bling/vim-airline'
Plug 'Valloric/MatchTagAlways'
Plug 'nathanaelkane/vim-indent-guides'

" Testing
Plug 'janko-m/vim-test'

" Ehancements
Plug 'kassio/neoterm'

" Git & Github
Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" Navigation
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'mileszs/ack.vim'
Plug 'dyng/ctrlsf.vim'
Plug 'majutsushi/tagbar'
" Plug 'jeetsukumaran/vim-buffergator'
" Plug 'junegunn/goyo.vim'

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'thoughtbot/vim-rspec'
Plug 'p0deje/vim-ruby-interpolation'
Plug 'slim-template/vim-slim'
" Plug 'ngmy/vim-rubocop' " Don't work

" Javascript
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'moll/vim-node'

" Text formats
Plug 'tpope/vim-haml'
Plug 'elzr/vim-json'
Plug 'plasticboy/vim-markdown'
Plug 'stephpy/vim-yaml'
Plug 'chrisbra/csv.vim'
Plug 'othree/html5.vim'
Plug 'digitaltoad/vim-pug'
Plug 'rhysd/vim-clang-format'

" Workflow
Plug 'tpope/vim-obsession'

" Temporary disabled
" Plug 'mbbill/undotree'
" Plug 'ervandew/supertab'
" Plug 'joonty/vdebug'
" Plug 'tpope/vim-ragtag'
" Plug 'reedes/vim-lexical'
" Plug 'xolox/vim-misc'

" Not sure about these
" Plug 'editorconfig/editorconfig-vim'
" Plug 'godlygeek/tabular'
" Plug 'Shougo/vimshell.vim'
" Plug 'tpope/vim-classpath'
" Plug 'vim-scripts/paredit.vim'
" Plug 'wlangstroth/vim-racket'
" Plug 'Shougo/vimproc.vim'
" Plug 'ekalinin/Dockerfile.vim'
" Plug 'neovimhaskell/haskell-vim'
" Plug 'scrooloose/syntastic'

call plug#end()

let mapleader=','

" ruby shortcuts
nmap <leader>r :T ruby %<cr>
nmap <leader>b orequire 'pry-byebug'; binding.pry<ESC>

" janko-m/vim-test
" let test#strategy = 'neoterm'
let test#strategy = 'neovim'
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" Useful for non-rails apps
let test#ruby#rspec#options = '--require ./spec/spec_helper.rb'

" Neovim's terminal mode escape
:tnoremap <Esc> <C-\><C-n>

" kassio/neoterm
let g:neoterm_automap_keys = ',tt'
let g:neoterm_use_relative_path = 1
let g:neoterm_shell = 'bash -login'

nnoremap <silent> ,tc :call neoterm#kill()<cr>
nnoremap <silent> ,th :call neoterm#close()<cr>
nnoremap <silent> ,tl :call neoterm#clear()<cr>
nnoremap <silent> <f10> :TREPLSendFile<cr>
nnoremap <silent> <f9> :TREPLSend<cr>
vnoremap <silent> <f9> :TREPLSend<cr>

" filetype plugin indent on
augroup lexical
  autocmd!
  autocmd FileType markdown,mkd call lexical#init()
  autocmd FileType textile call lexical#init()
  autocmd FileType text call lexical#init({ 'spell': 0 })
augroup END

" Sets how many lines of history VIM has to remember
set history=500

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" Enhanced command completion
set wildmenu
set visualbell

if has('mouse')
  set mouse=a
endif

set cursorline
set hidden
set nofoldenable
set nowrap
set number
set hlsearch
set ignorecase
set smartcase

set nobackup
set nowb
set noswapfile

set autoindent
set expandtab
set softtabstop=2
set shiftwidth=4

set t_Co=256
colorscheme jellybeans

" Share undo history across sessions by storing it in a file.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" Ack

" Set silver searcher (ag) as Ack's backend
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Do not jump on first result
cnoreabbrev Ack Ack!

" Set keyboard shortcut
nnoremap <Leader>a :Ack!<Space>

" ?
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Do not hide double quotes when viewing json files (https://github.com/elzr/vim-json#specific-customizations)
let g:vim_json_syntax_conceal = 0

" Automatically removing all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

let g:vim_markdown_folding_disabled = 1

nmap <F8> :TagbarToggle<CR>

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>
nnoremap <silent> <bs> <C-w><Left>

" format the entire file
nnoremap <leader>fef :normal! gg=G``<CR>

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

nmap <C-\> :NERDTreeFind<CR>
nmap <silent> <leader><leader> :NERDTreeToggle<CR>

let NERDTreeIgnore = ['\.pyc$', '\.retry$']

" ctrlpvim/ctrlp.vim
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

nmap <silent> // :nohlsearch<CR>
noremap ,hl :set hlsearch! hlsearch?<CR>

" Allows you to enter sudo pass and save the file
" " when you forgot to open your file with sudo
cmap w!! %!sudo tee > /dev/null %

" Allow to copy/paste between VIM instances
" "copy the current visual selection to ~/.vim-buffer
vmap <leader>y :w! ~/.vim-buffer<CR>
" "copy the current line to the buffer file if no visual selection
nmap <leader>y :.w! ~/.vim-buffer<CR>
" "paste the contents of the buffer file
nmap <leader>p :r ~/.vim-buffer<CR>

au BufRead,BufNewFile {Vagrantfile,Gemfile,Capfile} set ft=ruby

au FileType ruby setl sw=2 sts=2 et
au FileType erb setl sw=2 sts=2 et
au FileType javascript setl sw=2 sts=2 et
au FileType yaml setl sw=2 sts=2 et
autocmd Filetype php setlocal ts=4 sw=4 autoindent

if filereadable(expand("~/.vimrc.after"))
  source ~/.vimrc.after
endif

" Local Vimrc
if filereadable("./.lnvimrc")
  execute "source ./.lnvimrc"
endif
